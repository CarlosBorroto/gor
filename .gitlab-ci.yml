#
# Gitlab build file for GOR.
#

include:
  - project: wuxi-nextcode/sdev/gitlab-ci-scripts
    file: /auto-ci-workflow/legacy.yml

variables:
  DOCKER_DRIVER: overlay2
  JAVA_BUILDER_IMAGE: registry.gitlab.com/wuxi-nextcode/sdev/build-images/java-17:latest
  GIT_SUBMODULE_STRATEGY: none
  GIT_DEPTH: 2
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  SECURITY_SCAN: "false"
  SKIP_ECR: 'yes' # Skip the push to ECR step
  # Vars needed for the Genuity Auto-CI
  RELEASABLE_BRANCH: master                                         # Optional (master is the default).  If this matches the current branch, the built image will be releasable with a semver tag.


# Temporary overwrite of tasks from the auto git.

# Triggers running on branch that should be releasable (by tagging later), must start with v so we don't pick merge requests.

.on-releasable-branch-only:
  rules:
    - if: $CI_COMMIT_REF_NAME == $RELEASABLE_BRANCH

.on-releasable-or-release-branch-only:
  rules:
    - if: $CI_COMMIT_REF_NAME == $RELEASABLE_BRANCH
    - if: $CI_COMMIT_REF_NAME =~ /^release\/v(0|[1-9]\d*)\.(0|[1-9]\d*)$/

.on-releasable-snapshot-or-semver-tag-only:
  before_script:
    - export VERSION_FROM_FILE="$(cat VERSION)"
  rules:
    - if: $CI_COMMIT_REF_NAME == $RELEASABLE_BRANCH && $VERSION_FROM_FILE =~ /.*SNAPSHOT.*/i
    - if: $CI_COMMIT_TAG =~ /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-([1-9]\d*|[\da-z-]*[a-z-][\da-z-]*)(\.([1-9]\d*|[\da-z-]*[a-z-][\da-z-]*))*)?(\+[\da-z-]+(\.[\da-z-]+)*)?$/

.on-semver-tag-only:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-([1-9]\d*|[\da-z-]*[a-z-][\da-z-]*)(\.([1-9]\d*|[\da-z-]*[a-z-][\da-z-]*))*)?(\+[\da-z-]+(\.[\da-z-]+)*)?$/


stages:
  - build
  - test
  - publish
  - promote
  - release
  - deploy


before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


.build_with_cache:  
  extends: .on-branches
  image: "$JAVA_BUILDER_IMAGE"
  tags:
    - gitlab-build-01
  variables:
    # Vars for build resources
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_MEMORY_LIMIT: 6Gi
  cache:
    #key: "$CI_COMMIT_REF_NAME"   # Cache per branch.
    key:
      files:
        - gradle/wrapper/gradle-wrapper.properties    # Cache per version of Gradle wrapper.

    policy: pull
    paths:
      - .gradle/wrapper/
      - .gradle/caches/


build:
  extends: .build_with_cache
  image: "$JAVA_BUILDER_IMAGE"
  stage: build
  variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  script: ./gradlew classes
  cache:
    policy: pull-push
  artifacts:
    paths:
      - "**/build/libs/*.jar"

.test:
  extends: .build_with_cache
  stage: test
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - ln -s ${INTEGRATION_TESTS_SECRETS_ENV} tests/config/secrets.env
  artifacts:
    reports:
      junit:
        - "*/*/*/*/TEST-*.xml"
        - "*/*/*/*/*/TEST-*.xml"
        # Seems like ** does not work properly (even though it is used in the Gitlab docutmentation)
        #- "**/build/test-results/test/**/TEST-*.xml"

# Is a litle bit faster, but does not publish test results!
build_test:
  rules:
    - when: never
  extends:
    - .build_with_cache
#    - .test
  stage: build
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  before_script:
    - ln -s ${INTEGRATION_TESTS_SECRETS_ENV} tests/config/secrets.env
  script: ./gradlew --continue test slowTest integrationTest
  cache:
    policy: pull-push
  artifacts:
    paths:
      - "**/build/libs/*.jar"
    reports:
      junit:
        - "*/*/*/*/TEST-*.xml"
        - "*/*/*/*/*/TEST-*.xml"
        # Seems like ** does not work properly (even though it is used in the Gitlab documentation)
        #- "**/build/test-results/test/**/TEST-*.xml"


unittest:
  extends: .test
  script: ./gradlew --continue test


slowtest:
  extends: .test
  script: ./gradlew --continue slowTest


integrationtest:
  extends: .test
  script: ./gradlew --continue integrationTest


# This code quality block is needed to work around https://gitlab.com/gitlab-org/gitlab/issues/12274
code_quality:
  extends:
    - .on-releasable-or-release-branch-only
  stage: test
  tags:
    - gitlab-build-01
  variables:
    KUBERNETES_CPU_REQUEST: 2
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 3Gi
    KUBERNETES_MEMORY_LIMIT: 6Gi
    TIMEOUT_SECONDS: "1200"
    #CODECLIMATE_DEBUG: "1"
    ENGINE_MEMORY_LIMIT_BYTES: "3221223823"
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths: [gl-code-quality-report.json]
    expire_in: 1 week


dependency_scanning:
  stage: test
  tags:
    - gitlab-build-01
  variables:
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_MEMORY_LIMIT: 6Gi
    DS_DEFAULT_ANALYZERS: "gemnasium-maven"
    # There is no need to run tests or generate sphinx documentation for license management
    # analysis, however, the license management plugin calls the build task so we have to manually
    # disable tests and documentation generation.
    SECURE_LOG_LEVEL: "debug"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dskip.tests=true"
  artifacts:
    paths: [gl-dependency-scanning-report.json]


spotbugs-sast:
  variables:
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_CPU_LIMIT: 6
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_MEMORY_LIMIT: 6Gi
    GRADLE_PATH: "$CI_PROJECT_DIR/gradlew"
    SAST_JAVA_VERSION: "17"
    JAVA_OPTS: "-Xmx4G"
    SECURE_LOG_LEVEL: "debug"
    GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.caching=true -Dskip.tests=true"
  rules:
    - if: '$SECURITY_SCAN == "true"'

publish:
  extends:
    - .build_with_cache
    - .on-releasable-snapshot-or-semver-tag-only
  stage: publish
  script: ./gradlew publish -x test -x slowTest -x integrationTest -Pinclude.documentation


# Disable default tasks that should not be triggered.

container_scanning:
  rules:
    - when: never

promote-container:
  rules:
    - when: never

tag-container:
  rules:
    - when: never

push-snapshot-to-dockerhub:
  rules:
    - when: never

push-feature-branch-docker-to-dockerhub:
  rules:
    - when: never

push-version-to-dockerhub:
  rules:
    - when: never
