/*
 *  BEGIN_COPYRIGHT
 *
 *  Copyright (C) 2011-2013 deCODE genetics Inc.
 *  Copyright (C) 2013-2019 WuXi NextCode Inc.
 *  All Rights Reserved.
 *
 *  GORpipe is free software: you can redistribute it and/or modify
 *  it under the terms of the AFFERO GNU General Public License as published by
 *  the Free Software Foundation.
 *
 *  GORpipe is distributed "AS-IS" AND WITHOUT ANY WARRANTY OF ANY KIND,
 *  INCLUDING ANY IMPLIED WARRANTY OF MERCHANTABILITY,
 *  NON-INFRINGEMENT, OR FITNESS FOR A PARTICULAR PURPOSE. See
 *  the AFFERO GNU General Public License for the complete license terms.
 *
 *  You should have received a copy of the AFFERO GNU General Public License
 *  along with GORpipe.  If not, see <http://www.gnu.org/licenses/agpl-3.0.html>
 *
 *  END_COPYRIGHT
 */
plugins {
    id 'gor.java-library'
    id 'gor.java-application'
    id 'antlr'
    id 'gor.scala-common'
}

project(':gorscripts') {

    generateGrammarSource {
        arguments += ["-visitor"]
    }

    sourceSets.main.scala.srcDirs file("${projectDir}/build/generated-src/antlr/main")

    dependencies {
        implementation project(':gortools')
        implementation project(':model')
        implementation project(':base')
        implementation project(':util')

        implementation "org.aeonbits.owner:owner:_"
        implementation "ch.qos.logback:logback-classic:_"
        implementation "info.picocli:picocli:_"
        implementation "info.picocli:picocli-shell-jline3:_"
        implementation "commons-io:commons-io:_"
        implementation "org.apache.commons:commons-lang3:_"
        implementation "de.tototec:de.tototec.cmdoption:_"
        implementation "com.fasterxml.jackson.core:jackson-databind:_"
        implementation "org.reflections:reflections:_"
        implementation "com.google.guava:guava:_"

        runtimeOnly project(':documentation')
        runtimeOnly project(':drivers')

        runtimeOnly "org.scala-lang:scala-reflect:_"


        testImplementation(testFixtures(project(":drivers")))
        testImplementation project(':test')
        testImplementation project(':util')

        testImplementation Testing.mockito.core
        testImplementation "org.scalatest:scalatest_${scalaVersion}:_"
        testImplementation "org.scalacheck:scalacheck_${scalaVersion}:_"
        testImplementation 'com.github.stefanbirkner:system-rules:_'
        testImplementation "commons-io:commons-io:_"
        testImplementation "org.apache.commons:commons-lang3:_"
        testImplementation "com.google.guava:guava:_"
        testImplementation "com.github.samtools:htsjdk:_"

        testRuntimeOnly "org.apache.derby:derby:_"
        testRuntimeOnly "org.apache.derby:derbytools:_"

        antlr("org.antlr:antlr4:_")
    }

    // Tests

    // Run scala tests. These are not automatically picked up by gradle,
    // so we run them like this.
    task testScala(dependsOn: ['testClasses'], type: JavaExec) {
        systemProperty 'logback.configurationFile', new File("${project.rootDir}/tests/config/logback-test.xml").absolutePath
        mainClass = 'org.scalatest.tools.Runner'
        args = ['-R', 'build/classes/scala/test', '-o']

        classpath = sourceSets.test.runtimeClasspath
    }
    //Disabling this in the test task, adding @RunWith(classOf[JUnitRunner]) instead so we can utilize the same report mechanism for all tests
    //test.dependsOn 'testScala'

    // Jar creation

    jar {
        manifest.attributes 'Main-Class': "gorsat.process.GorPipe"
    }

    // Distribution

    // Use the override keyword to override the default 'startScripts' task.
    def scripts = [
            'gorpipe'   : ['className'     : 'gorsat.process.GorPipe',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback-console.xml',
                                              '-Dgor.memoryMonitor.rowsBetweenChecks=0']],

            'gorshell'   : ['className'     : 'org.gorpipe.gorshell.GorShell',
                            'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                               '-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']],

            'gor'       : ['className'     : 'org.gorpipe.gor.cli.GorCLI',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback-console.xml',
                                              '-Dgor.memoryMonitor.rowsBetweenChecks=0']],

            'jessica'   : ['override'      : 'startScripts',
                           'className'     : 'org.gorpipe.jessica.Jessica',
                           'defaultJvmOpts': []],

            'gormanager': ['className'     : 'org.gorpipe.gor.manager.TableManagerCLI',
                           'defaultJvmOpts': ['-Djava.security.egd=file:/dev/./urandom',
                                              '-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']],

            'gortool'   : ['className'     : 'org.gorpipe.gor.tools.GorToolsCLI',
                           'defaultJvmOpts': ['-Dlogback.configurationFile=__APP_HOME__/config/logback.xml']]
    ]

    scripts.each() { scriptName, params ->
        def t = params.containsKey('override') ? tasks.getByName(params.override) : tasks.create(name: scriptName + 'StartScript', type: CreateStartScripts)
        updateScriptTask("GOR", scriptName, params, t, project)
    }

    tasks.distZip.enabled = true
    tasks.distZip.archiveClassifier = "dist"
}

